services:
  djangoapp:
    container_name: djangoapp
    build:
      context: .
      dockerfile: Dockerfile
    
    # Sobrescreve o CMD do Dockerfile para usar o servidor de desenvolvimento do Django,
    # que possui recarregamento automático (hot-reloading).
    command: python manage.py runserver 0.0.0.0:8000

    ports:
      - "8000:8000"

    env_file:
      - ./.env

    # Volumes para desenvolvimento: mapeiam seu código local para o container,
    # permitindo que as alterações reflitam instantaneamente.
    # Para deploy em produção, esta seção de volumes de código seria comentada.
    volumes:
      # Mapeia a pasta do código da aplicação
      - ./djangoapp:/home/django/web
      # Mapeia a pasta de estáticos de desenvolvimento
      - ./static:/home/django/web/static
      # Mapeia o arquivo .env para que o python-decouple possa lê-lo
      - ./.env:/home/django/web/.env
      # Mapeia os volumes de dados para que possamos inspecioná-los no PC, se necessário
      - ./data/web/staticfiles:/home/django/web/staticfiles
      - ./data/web/media:/home/django/web/mediafiles
      - ./static:/app/static

    depends_on:
      psql:
        condition: service_healthy # Espera o banco de dados estar saudável para iniciar

    networks:
      - django_network

  psql:
    container_name: psql
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    
    # Carrega as variáveis de ambiente para o container do Postgres
    # e para o healthcheck funcionar corretamente.
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
      
    networks:
      - django_network

# Define o volume nomeado para persistir os dados do banco de dados
volumes:
  postgres_data:

# Define a rede dedicada para os serviços se comunicarem
networks:
  django_network:
    driver: bridge